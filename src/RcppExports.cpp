// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pml_table
String pml_table(DataFrame x, std::string style_id, int col_width, int row_height, int first_row, int last_row, int first_column, int last_column);
RcppExport SEXP officer_pml_table(SEXP xSEXP, SEXP style_idSEXP, SEXP col_widthSEXP, SEXP row_heightSEXP, SEXP first_rowSEXP, SEXP last_rowSEXP, SEXP first_columnSEXP, SEXP last_columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type style_id(style_idSEXP);
    Rcpp::traits::input_parameter< int >::type col_width(col_widthSEXP);
    Rcpp::traits::input_parameter< int >::type row_height(row_heightSEXP);
    Rcpp::traits::input_parameter< int >::type first_row(first_rowSEXP);
    Rcpp::traits::input_parameter< int >::type last_row(last_rowSEXP);
    Rcpp::traits::input_parameter< int >::type first_column(first_columnSEXP);
    Rcpp::traits::input_parameter< int >::type last_column(last_columnSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_table(x, style_id, col_width, row_height, first_row, last_row, first_column, last_column));
    return rcpp_result_gen;
END_RCPP
}
// wml_table
String wml_table(DataFrame x, std::string style_id, int first_row, int last_row, int first_column, int last_column, int no_hband, int no_vband);
RcppExport SEXP officer_wml_table(SEXP xSEXP, SEXP style_idSEXP, SEXP first_rowSEXP, SEXP last_rowSEXP, SEXP first_columnSEXP, SEXP last_columnSEXP, SEXP no_hbandSEXP, SEXP no_vbandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type style_id(style_idSEXP);
    Rcpp::traits::input_parameter< int >::type first_row(first_rowSEXP);
    Rcpp::traits::input_parameter< int >::type last_row(last_rowSEXP);
    Rcpp::traits::input_parameter< int >::type first_column(first_columnSEXP);
    Rcpp::traits::input_parameter< int >::type last_column(last_columnSEXP);
    Rcpp::traits::input_parameter< int >::type no_hband(no_hbandSEXP);
    Rcpp::traits::input_parameter< int >::type no_vband(no_vbandSEXP);
    rcpp_result_gen = Rcpp::wrap(wml_table(x, style_id, first_row, last_row, first_column, last_column, no_hband, no_vband));
    return rcpp_result_gen;
END_RCPP
}
// p_ph
std::string p_ph(int offx, int offy, int cx, int cy, int rot, int r, int g, int b, int a);
RcppExport SEXP officer_p_ph(SEXP offxSEXP, SEXP offySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP rotSEXP, SEXP rSEXP, SEXP gSEXP, SEXP bSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type offx(offxSEXP);
    Rcpp::traits::input_parameter< int >::type offy(offySEXP);
    Rcpp::traits::input_parameter< int >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< int >::type cy(cySEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(p_ph(offx, offy, cx, cy, rot, r, g, b, a));
    return rcpp_result_gen;
END_RCPP
}
// w_ppr
std::string w_ppr(std::string text_align, int pb, int pt, int pl, int pr, int shd_r, int shd_g, int shd_b, int shd_a, IntegerVector btlr_red, IntegerVector btlr_green, IntegerVector btlr_blue, IntegerVector btlr_alpha, CharacterVector type, IntegerVector width);
RcppExport SEXP officer_w_ppr(SEXP text_alignSEXP, SEXP pbSEXP, SEXP ptSEXP, SEXP plSEXP, SEXP prSEXP, SEXP shd_rSEXP, SEXP shd_gSEXP, SEXP shd_bSEXP, SEXP shd_aSEXP, SEXP btlr_redSEXP, SEXP btlr_greenSEXP, SEXP btlr_blueSEXP, SEXP btlr_alphaSEXP, SEXP typeSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text_align(text_alignSEXP);
    Rcpp::traits::input_parameter< int >::type pb(pbSEXP);
    Rcpp::traits::input_parameter< int >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< int >::type pl(plSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type shd_r(shd_rSEXP);
    Rcpp::traits::input_parameter< int >::type shd_g(shd_gSEXP);
    Rcpp::traits::input_parameter< int >::type shd_b(shd_bSEXP);
    Rcpp::traits::input_parameter< int >::type shd_a(shd_aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_red(btlr_redSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_green(btlr_greenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_blue(btlr_blueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_alpha(btlr_alphaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(w_ppr(text_align, pb, pt, pl, pr, shd_r, shd_g, shd_b, shd_a, btlr_red, btlr_green, btlr_blue, btlr_alpha, type, width));
    return rcpp_result_gen;
END_RCPP
}
// a_ppr
std::string a_ppr(std::string text_align, int pb, int pt, int pl, int pr, int shd_r, int shd_g, int shd_b, int shd_a, IntegerVector btlr_red, IntegerVector btlr_green, IntegerVector btlr_blue, IntegerVector btlr_alpha, CharacterVector type, IntegerVector width);
RcppExport SEXP officer_a_ppr(SEXP text_alignSEXP, SEXP pbSEXP, SEXP ptSEXP, SEXP plSEXP, SEXP prSEXP, SEXP shd_rSEXP, SEXP shd_gSEXP, SEXP shd_bSEXP, SEXP shd_aSEXP, SEXP btlr_redSEXP, SEXP btlr_greenSEXP, SEXP btlr_blueSEXP, SEXP btlr_alphaSEXP, SEXP typeSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text_align(text_alignSEXP);
    Rcpp::traits::input_parameter< int >::type pb(pbSEXP);
    Rcpp::traits::input_parameter< int >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< int >::type pl(plSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type shd_r(shd_rSEXP);
    Rcpp::traits::input_parameter< int >::type shd_g(shd_gSEXP);
    Rcpp::traits::input_parameter< int >::type shd_b(shd_bSEXP);
    Rcpp::traits::input_parameter< int >::type shd_a(shd_aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_red(btlr_redSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_green(btlr_greenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_blue(btlr_blueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_alpha(btlr_alphaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(a_ppr(text_align, pb, pt, pl, pr, shd_r, shd_g, shd_b, shd_a, btlr_red, btlr_green, btlr_blue, btlr_alpha, type, width));
    return rcpp_result_gen;
END_RCPP
}
// css_ppr
std::string css_ppr(std::string text_align, int pb, int pt, int pl, int pr, int shd_r, int shd_g, int shd_b, int shd_a, IntegerVector btlr_red, IntegerVector btlr_green, IntegerVector btlr_blue, IntegerVector btlr_alpha, CharacterVector type, IntegerVector width);
RcppExport SEXP officer_css_ppr(SEXP text_alignSEXP, SEXP pbSEXP, SEXP ptSEXP, SEXP plSEXP, SEXP prSEXP, SEXP shd_rSEXP, SEXP shd_gSEXP, SEXP shd_bSEXP, SEXP shd_aSEXP, SEXP btlr_redSEXP, SEXP btlr_greenSEXP, SEXP btlr_blueSEXP, SEXP btlr_alphaSEXP, SEXP typeSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text_align(text_alignSEXP);
    Rcpp::traits::input_parameter< int >::type pb(pbSEXP);
    Rcpp::traits::input_parameter< int >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< int >::type pl(plSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type shd_r(shd_rSEXP);
    Rcpp::traits::input_parameter< int >::type shd_g(shd_gSEXP);
    Rcpp::traits::input_parameter< int >::type shd_b(shd_bSEXP);
    Rcpp::traits::input_parameter< int >::type shd_a(shd_aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_red(btlr_redSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_green(btlr_greenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_blue(btlr_blueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_alpha(btlr_alphaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(css_ppr(text_align, pb, pt, pl, pr, shd_r, shd_g, shd_b, shd_a, btlr_red, btlr_green, btlr_blue, btlr_alpha, type, width));
    return rcpp_result_gen;
END_RCPP
}
// rpr_new
SEXP rpr_new(Rcpp::List compounds);
RcppExport SEXP officer_rpr_new(SEXP compoundsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type compounds(compoundsSEXP);
    rcpp_result_gen = Rcpp::wrap(rpr_new(compounds));
    return rcpp_result_gen;
END_RCPP
}
// rpr_w
std::string rpr_w(SEXP fp);
RcppExport SEXP officer_rpr_w(SEXP fpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fp(fpSEXP);
    rcpp_result_gen = Rcpp::wrap(rpr_w(fp));
    return rcpp_result_gen;
END_RCPP
}
// rpr_p
std::string rpr_p(SEXP fp);
RcppExport SEXP officer_rpr_p(SEXP fpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fp(fpSEXP);
    rcpp_result_gen = Rcpp::wrap(rpr_p(fp));
    return rcpp_result_gen;
END_RCPP
}
// rpr_css
std::string rpr_css(SEXP fp);
RcppExport SEXP officer_rpr_css(SEXP fpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fp(fpSEXP);
    rcpp_result_gen = Rcpp::wrap(rpr_css(fp));
    return rcpp_result_gen;
END_RCPP
}
// w_tcpr
std::string w_tcpr(std::string vertical_align, std::string text_direction, int mb, int mt, int ml, int mr, int shd_r, int shd_g, int shd_b, int shd_a, bool do_bgimg, std::string bgimg_rid, std::string bgimg_path, IntegerVector btlr_red, IntegerVector btlr_green, IntegerVector btlr_blue, IntegerVector btlr_alpha, CharacterVector type, IntegerVector width);
RcppExport SEXP officer_w_tcpr(SEXP vertical_alignSEXP, SEXP text_directionSEXP, SEXP mbSEXP, SEXP mtSEXP, SEXP mlSEXP, SEXP mrSEXP, SEXP shd_rSEXP, SEXP shd_gSEXP, SEXP shd_bSEXP, SEXP shd_aSEXP, SEXP do_bgimgSEXP, SEXP bgimg_ridSEXP, SEXP bgimg_pathSEXP, SEXP btlr_redSEXP, SEXP btlr_greenSEXP, SEXP btlr_blueSEXP, SEXP btlr_alphaSEXP, SEXP typeSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vertical_align(vertical_alignSEXP);
    Rcpp::traits::input_parameter< std::string >::type text_direction(text_directionSEXP);
    Rcpp::traits::input_parameter< int >::type mb(mbSEXP);
    Rcpp::traits::input_parameter< int >::type mt(mtSEXP);
    Rcpp::traits::input_parameter< int >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< int >::type mr(mrSEXP);
    Rcpp::traits::input_parameter< int >::type shd_r(shd_rSEXP);
    Rcpp::traits::input_parameter< int >::type shd_g(shd_gSEXP);
    Rcpp::traits::input_parameter< int >::type shd_b(shd_bSEXP);
    Rcpp::traits::input_parameter< int >::type shd_a(shd_aSEXP);
    Rcpp::traits::input_parameter< bool >::type do_bgimg(do_bgimgSEXP);
    Rcpp::traits::input_parameter< std::string >::type bgimg_rid(bgimg_ridSEXP);
    Rcpp::traits::input_parameter< std::string >::type bgimg_path(bgimg_pathSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_red(btlr_redSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_green(btlr_greenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_blue(btlr_blueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_alpha(btlr_alphaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(w_tcpr(vertical_align, text_direction, mb, mt, ml, mr, shd_r, shd_g, shd_b, shd_a, do_bgimg, bgimg_rid, bgimg_path, btlr_red, btlr_green, btlr_blue, btlr_alpha, type, width));
    return rcpp_result_gen;
END_RCPP
}
// a_tcpr
std::string a_tcpr(std::string vertical_align, std::string text_direction, int mb, int mt, int ml, int mr, int shd_r, int shd_g, int shd_b, int shd_a, bool do_bgimg, std::string bgimg_rid, std::string bgimg_path, IntegerVector btlr_red, IntegerVector btlr_green, IntegerVector btlr_blue, IntegerVector btlr_alpha, CharacterVector type, IntegerVector width);
RcppExport SEXP officer_a_tcpr(SEXP vertical_alignSEXP, SEXP text_directionSEXP, SEXP mbSEXP, SEXP mtSEXP, SEXP mlSEXP, SEXP mrSEXP, SEXP shd_rSEXP, SEXP shd_gSEXP, SEXP shd_bSEXP, SEXP shd_aSEXP, SEXP do_bgimgSEXP, SEXP bgimg_ridSEXP, SEXP bgimg_pathSEXP, SEXP btlr_redSEXP, SEXP btlr_greenSEXP, SEXP btlr_blueSEXP, SEXP btlr_alphaSEXP, SEXP typeSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vertical_align(vertical_alignSEXP);
    Rcpp::traits::input_parameter< std::string >::type text_direction(text_directionSEXP);
    Rcpp::traits::input_parameter< int >::type mb(mbSEXP);
    Rcpp::traits::input_parameter< int >::type mt(mtSEXP);
    Rcpp::traits::input_parameter< int >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< int >::type mr(mrSEXP);
    Rcpp::traits::input_parameter< int >::type shd_r(shd_rSEXP);
    Rcpp::traits::input_parameter< int >::type shd_g(shd_gSEXP);
    Rcpp::traits::input_parameter< int >::type shd_b(shd_bSEXP);
    Rcpp::traits::input_parameter< int >::type shd_a(shd_aSEXP);
    Rcpp::traits::input_parameter< bool >::type do_bgimg(do_bgimgSEXP);
    Rcpp::traits::input_parameter< std::string >::type bgimg_rid(bgimg_ridSEXP);
    Rcpp::traits::input_parameter< std::string >::type bgimg_path(bgimg_pathSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_red(btlr_redSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_green(btlr_greenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_blue(btlr_blueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_alpha(btlr_alphaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(a_tcpr(vertical_align, text_direction, mb, mt, ml, mr, shd_r, shd_g, shd_b, shd_a, do_bgimg, bgimg_rid, bgimg_path, btlr_red, btlr_green, btlr_blue, btlr_alpha, type, width));
    return rcpp_result_gen;
END_RCPP
}
// css_tcpr
std::string css_tcpr(std::string vertical_align, std::string text_direction, int mb, int mt, int ml, int mr, int shd_r, int shd_g, int shd_b, int shd_a, bool do_bgimg, std::string bgimg_rid, std::string bgimg_path, IntegerVector btlr_red, IntegerVector btlr_green, IntegerVector btlr_blue, IntegerVector btlr_alpha, CharacterVector type, IntegerVector width);
RcppExport SEXP officer_css_tcpr(SEXP vertical_alignSEXP, SEXP text_directionSEXP, SEXP mbSEXP, SEXP mtSEXP, SEXP mlSEXP, SEXP mrSEXP, SEXP shd_rSEXP, SEXP shd_gSEXP, SEXP shd_bSEXP, SEXP shd_aSEXP, SEXP do_bgimgSEXP, SEXP bgimg_ridSEXP, SEXP bgimg_pathSEXP, SEXP btlr_redSEXP, SEXP btlr_greenSEXP, SEXP btlr_blueSEXP, SEXP btlr_alphaSEXP, SEXP typeSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vertical_align(vertical_alignSEXP);
    Rcpp::traits::input_parameter< std::string >::type text_direction(text_directionSEXP);
    Rcpp::traits::input_parameter< int >::type mb(mbSEXP);
    Rcpp::traits::input_parameter< int >::type mt(mtSEXP);
    Rcpp::traits::input_parameter< int >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< int >::type mr(mrSEXP);
    Rcpp::traits::input_parameter< int >::type shd_r(shd_rSEXP);
    Rcpp::traits::input_parameter< int >::type shd_g(shd_gSEXP);
    Rcpp::traits::input_parameter< int >::type shd_b(shd_bSEXP);
    Rcpp::traits::input_parameter< int >::type shd_a(shd_aSEXP);
    Rcpp::traits::input_parameter< bool >::type do_bgimg(do_bgimgSEXP);
    Rcpp::traits::input_parameter< std::string >::type bgimg_rid(bgimg_ridSEXP);
    Rcpp::traits::input_parameter< std::string >::type bgimg_path(bgimg_pathSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_red(btlr_redSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_green(btlr_greenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_blue(btlr_blueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type btlr_alpha(btlr_alphaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(css_tcpr(vertical_align, text_direction, mb, mt, ml, mr, shd_r, shd_g, shd_b, shd_a, do_bgimg, bgimg_rid, bgimg_path, btlr_red, btlr_green, btlr_blue, btlr_alpha, type, width));
    return rcpp_result_gen;
END_RCPP
}
// wml_run_pic
std::string wml_run_pic(std::string src, double width, double height);
RcppExport SEXP officer_wml_run_pic(SEXP srcSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type src(srcSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(wml_run_pic(src, width, height));
    return rcpp_result_gen;
END_RCPP
}
// pml_run_pic
std::string pml_run_pic(std::string src, double width, double height);
RcppExport SEXP officer_pml_run_pic(SEXP srcSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type src(srcSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(pml_run_pic(src, width, height));
    return rcpp_result_gen;
END_RCPP
}
